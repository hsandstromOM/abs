var test = global.it;
var assert = require('assert');
var pd = require('pd');

var flattenPrototypes = require('../index.js');

test('flattenPrototypes is a function', function (end) {
    assert.strictEqual(typeof flattenPrototypes, 'function');
    end();
});

test('flattens prototypes', function (end) {
    var root = { one: 'two' };
    var grandparent = Object.create(root, pd({
        three: 'four'
    }));
    var parent = Object.create(grandparent, pd({
        five: 'six'
    }));
    var obj = Object.create(parent, pd({
        seven: 'eight'
    }));

    var flat = flattenPrototypes(obj);

    assert.deepEqual(flat, {
        one: 'two',
        three: 'four',
        five: 'six',
        seven: 'eight'
    });
    end();
});

test('overwrites keys in correct order', function (end) {
    var root = {
        one: 'two',
        three: 'four',
        five: 'six',
        seven: 'eight',
        nine: 'ten'
    };
    var grandParent = Object.create(root, pd({
        three: 'eleven',
        five: 'twelve',
        seven: 'thirteen',
        nine: 'fourteen'
    }));
    var parent = Object.create(grandParent, pd({
        five: 'fiveteen',
        seven: 'sixteen',
        nine: 'seventeen'
    }));
    var obj = Object.create(parent, pd({
        seven: 'eighteen',
        nine: 'nineteen'
    }));

    var flat = flattenPrototypes(obj);

    assert.deepEqual(flat, {
        one: 'two',
        three: 'eleven',
        five: 'fiveteen',
        seven: 'eighteen',
        nine: 'nineteen'
    });
    end();
});

test('arrays', function (end) {
    var parent = {
        defaults: [1, 2]
    };

    var child = Object.create(parent, pd({
        seed: [1, 2]
    }));

    var flat = flattenPrototypes(child);

    assert.deepEqual(flat, {
        defaults: [1, 2],
        seed: [1, 2]
    });

    end();
});

test('makes deep merges', function (end) {
    var grandParent = {
        one: { two: 'two' },
        three: {
            four: {
                five: 'six'
            }
        },
        seven: {
            eight: {
                nine: {
                    ten: 'eleven'
                },
                twelve: {
                    thirteen: 'fourteen'
                }
            }
        }
    };
    var parent = Object.create(grandParent, pd({
        one: { fiveteen: 'sixteen' },
        three: {
            four: {
                seventeen: 'eighteen'
            }
        },
        seven: {
            eight: {
                nine: {
                    nineteen: 'twenty'
                },
                twelve: 'twentyone'
            }
        }
    }));
    var obj = Object.create(parent, pd({
        one: { twentytwo: 'twentythree' },
        three: {
            four: {
                twentyfour: 'twentyfive'
            }
        },
        seven: {
            eight: {
                nine: {
                    twentysix: 'twentyseven'
                }
            }
        }
    }));

    var flat = flattenPrototypes(obj);

    assert.deepEqual(flat, {
        one: { two: 'two', fiveteen: 'sixteen', twentytwo: 'twentythree' },
        three: {
            four: {
                five: 'six',
                seventeen: 'eighteen',
                twentyfour: 'twentyfive'
            }
        },
        seven: {
            eight: {
                nine: {
                    ten: 'eleven',
                    nineteen: 'twenty',
                    twentysix: 'twentyseven'
                },
                twelve: 'twentyone'
            }
        }
    });

    end();
});
